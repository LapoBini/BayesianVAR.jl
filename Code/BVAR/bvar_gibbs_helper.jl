# ------------------------------------------------------------------------------
# HELPER FUNCTIONS FOR GIBBS SAMPLING AND STRUCTURAL IDENTIFICATION 
# ------------------------------------------------------------------------------
#¬†These set of functions are used to implement gibbs sampling and identification
#¬†via sign restrictions 
#¬†Author: Lapo Bini lbini@ucsd.edu
# ------------------------------------------------------------------------------

function bvar_MNRD(
    Œ≤‚Çê::Array{Float64,1},   #¬†posterior mean (constant)
    ùõπ::Array{Float64,2},    
    Œ©‚Çì‚Åª¬π::Array{Float64,2},
    max_try::Int64,
    k::Int64,
    p::Int64;
    check_stationarity = true
    )

    # --------------------------------------------------------------------------
    # RANDOM DRAW MULTIVARIATE NORMAL AND CHECK STATIONARITY 
    # --------------------------------------------------------------------------

    #¬†Pre-allocate space while loop
    problem   = 0;
    check     = -1;
    num_try   = 1;
    stability = 0;
    Œ≤‚Å∫        = 0;

    #¬†Compute variance of posterior distribution 
    V‚Å∫ = kron(ùõπ, Œ©‚Çì‚Åª¬π);

    while check < 0 && num_try < max_try

        #¬†Random Draw from posterior distribution centered at posterior mean Œ≤‚Çê
        Œ≤‚Å∫ = Œ≤‚Çê + (randn(1,k*(k*p+1))*Matrix(cholesky(Hermitian(V‚Å∫)).U))';

        #¬†Transform from vector to matrix to compute eigenvalues 
        kp    = k*p;
        kp‚Çã‚ÇÅ  = k*(p-1);
        C_tmp = zeros(kp, kp);
        C_tmp[k+1:kp,1:kp‚Çã‚ÇÅ] = eye(kp‚Çã‚ÇÅ);

        # reshape
        tmp = reshape(Œ≤‚Å∫, kp+1, k);
        tmp = view(tmp, 1:kp, 1:k)';
        C_tmp[1:k,1:kp] = tmp;

        # Eigenvalue matrix of coefficients
        Œª‚Çõ = maximum(abs.(eigvals(C_tmp)));
        stability = Œª‚Çõ >= 1

        #¬†(i) Stationary BVAR: we are fine with the draw
        if stability == 0 || check_stationarity == false
            check = 10

        # (ii) Non-Stationary BVAR - keep iterating
        else
            num_try += 1
        end

    end

    # If after all the repetitions the system is non stable, report the issue
    #¬†putting problem = 1
    if stability > 0 || check_stationarity == false
        problem = 1
    end

    return Œ≤‚Å∫, problem

end


function bvar_predictive_dens(
    k::Int64,
    H::Int64,
    t::Int64,
    p::Int64,
    y::Array{Float64,2},
    b::Array{Float64,2},
    ùõπ::Array{Float64,2}
    )

    # --------------------------------------------------------------------------
    # COMPUTE PREDICTIVE DENSITY 
    # --------------------------------------------------------------------------

    # Draw N(0,1) innovations for variance and mean equation:
    Œ£ = Matrix(cholesky(Hermitian(ùõπ)).U)
    u = randn(H+p, k)

    # Note we only need H*K innovations, but adding an extra p draws makes
    # the indexing in the loop below a bit cleaner.
    y‚Çï        = zeros(H+p, k)
    y‚Çï[1:p,:] = y[t-p+1:t,:]

    #¬†Generate forecasts
    for tt = p+1:H+p

        #¬†Create Regressors
        x‚Çï = Array{Float64,2}(undef, p, k)
        for ji = 1:p
            x‚Çï[ji,:] = y‚Çï[tt-ji,:] 
        end

        #¬†Prediction with innovations
        x‚Çï = [reshape((x‚Çï)', 1, k*p) 1]
        y‚Çï[tt,:] = x‚Çï * b + u[tt,:]' * Œ£

    end

    return y‚Çï

end


function bvar_IWRD(
    S::Array{Float64,2},
    ŒΩ::Int64,
    )

    # --------------------------------------------------------------------------
    # RANDOM DRAW FROM INVERSE WISHART 
    # --------------------------------------------------------------------------
    # Draw from Inverted Wishert Distribution ùõπ ‚àº iW(S,ŒΩ) S is the (kxk) scale 
    # matrix and ŒΩ are the degrees of freedom. ùõπ = (‚àë‚Çú w·µ¢w·µ¢')‚Åª¬π with w·µ¢‚àºN(0,S)
    #
    # The Inverse Wishart distribution could be seen as¬†multivariate version of 
    #¬†the inverse gamma distribution (used for variance in univariate case) and
    #  it is a conjugate prior for the var/cov matrix of a multivariate normal.
    #
    # Random number generator for the inverse Wishart distribution): In order to
    # obtain a (nxn) random draw from an iW(S,ŒΩ)
    # 1 - Compute L the lower triangular Choleski of the scale matrix S = LL'.
    #¬†2 - Create Z = [z‚ÇÅ ‚Ä¶ z·µ•] made by T draws of (kx1) random vectors z·µ¢ ‚àº N(0,I‚Çñ)
    #¬†3 - Arrange vectors into a (Txn) matrix W = (L ‚ãÖ Z)', where row i of W is  
    #¬†4 - estimate X = (W'‚ãÖW)‚Åª¬π = (‚àë‚Çú w·µ¢w·µ¢')‚Åª¬π which is a random draw from iW(S,ŒΩ)
    # --------------------------------------------------------------------------

    #¬†Allocation 
    k = size(S,1)
    W = zeros(ŒΩ,k)

    #¬†1 - Compute lower triangular matrix of Scale positive definite matrix ŒΩ
    L = Matrix(cholesky(Hermitian(S)).U)';

    #¬†2 & 3 - Draw independent normal vector z·µ¢ ‚àº N(0,I‚Çñ) and create W = (L ‚ãÖ Z)'
    for i = 1:ŒΩ
        W[i,:] = (L * randn(k,1))'
    end

    #¬†4 - Since (W'‚ãÖW) ~ W(S,ŒΩ), now we want to obtain the inverse wishart:
    ùõπ = inv(W'*W);

    return ùõπ

end


function bvar_allign_shock(
    data::DataFrame, 
    instrument::DataFrame,
    lags::Int64
    )

    # --------------------------------------------------------------------------
    # ALLIGN DATES OF EXTERNAL INSTRUMENT AND VAR RESIDUALS
    # --------------------------------------------------------------------------
    # Dates of shock and var 
    date_z = instrument[:,1] .|> Date;
    ref_t  = data[lags+1:end,1] .|> Date;

    #¬†Starting late, endind early
    beg         = [date_z[1]; ref_t[1]];
    fin         = [date_z[end]; ref_t[end]];
    start_shock = argmax(beg);
    end_shock   = argmin(fin);

    idx_u = findall((ref_t .>= beg[start_shock]) .& (ref_t .<= fin[end_shock]));
    idx_z = findall((date_z .>= beg[start_shock]) .& (date_z .<= fin[end_shock]));

    return idx_u, idx_z 

end


function bvar_irf_iv(
    pos_shock::Int64,
    Œµ::Matrix{Float64},
    b::Matrix{Float64},
    Z::Vector{Any},
    k::Int64,
    Tz::Int64,
    lags::Int64,
    H·µ¢::Int64
    )

    # --------------------------------------------------------------------------
    # STRUCTURAL IDENTIFICATION VIA EXTERNAL INSTRUMENT
    # --------------------------------------------------------------------------
    #¬†Compute impulse response functions {Œò‚ÇÄ, ‚ãØ , Œò‚Çï}, starting point is the 
    # Structural VAR and then we derive the reduce form:
    # B‚ÇÄy‚Çú =  B‚ÇÅy‚Çú‚Çã‚ÇÅ + ‚Ä¶ + B‚Çöy‚Çú‚Çã‚Çö + u‚Çú
    # y‚Çú   =  B‚ÇÄ‚Åª¬πB‚ÇÅy‚Çú‚Çã‚ÇÅ + ‚Ä¶ + B‚ÇÄ‚Åª¬πB‚Çöy‚Çú‚Çã‚Çö + B‚ÇÄ‚Åª¬πu‚Çú
    # y‚Çú   =  Œ¶‚ÇÅy‚Çú‚Çã‚ÇÅ + ‚Ä¶ + Œ¶‚Çöy‚Çú‚Çã‚Çö + Œµ‚Çú
    # Relation between reduced form error and structural shocks: Œµ‚Çú = B‚ÇÄ‚Åª¬πu‚Çú
    #¬†Identification procedure: by instrumental variable, ory Proxy-SVAR. Wold
    # representation of the Companion form VAR:
    # Y‚Çú   =  Œ©‚ÇÅY‚Çú‚Çã‚ÇÅ + E‚Çú
    # Y‚Çú   = ‚àë Œ© ∞ E‚Çú
    # J Y‚Çú = ‚àë J Œ© ∞ J'J E‚Çú
    # y‚Çú   = ‚àë ùõπ‚Çï Œµ‚Çú =  ‚àë ùõπ‚Çï B‚ÇÄ‚Åª¬π B‚ÇÄ Œµ‚Çú
    # y‚Çú   = ‚àë Œò‚Çï u‚Çú
    # --------------------------------------------------------------------------
    #¬†Construct Dynamic Multiplier and pre allocate B‚ÇÄ‚Åª¬π
    Œ¶    = [b[1:end-1,:]'; eye(k*(lags-1)) zeros(k*(lags-1), k)];
    B‚ÇÄ‚Åª¬π = zeros(k, k);

    #¬†Estimate reduced form residual and first stage estimation B‚ÇÄ‚Åª¬π
    E_ŒµZ  = Œµ' * Z;
    E_Œµ‚ÇÅZ = E_ŒµZ[pos_shock:pos_shock,:];      # relevance condition
    b‚±º    = (E_ŒµZ * E_Œµ‚ÇÅZ)./(E_Œµ‚ÇÅZ * E_Œµ‚ÇÅZ);  # first stage coefficient

    #¬†Allocate contemporaneous response in the column of the instrumented variable
    B‚ÇÄ‚Åª¬π[:,pos_shock] = b‚±º;

    #¬†Selection matrix and allocate memory for results
    J   = [eye(k) zeros(k, k*(lags-1))]; # selection matrix
    IRF = zeros(H·µ¢, k);

    #¬†Estimation Impulse response function
    IRF[1,:] = B‚ÇÄ‚Åª¬π[:,pos_shock]' |> any2float;
    for h in 1:H·µ¢-1
        Œ®   = J * Œ¶^h * J'
        irf = (Œ® * B‚ÇÄ‚Åª¬π)[:,pos_shock]
        IRF[h+1,:] = irf;
    end

    return IRF

end