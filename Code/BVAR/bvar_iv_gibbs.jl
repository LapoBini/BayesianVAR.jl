function bvar_iv_gibbs(
    Œò‚ÇÅ::Hyperparameter,           #¬†Hyperpriors 
    data::DataFrame,              #¬†data with dates and variable names
    y‚Çõ::Array{Float64,2},         # dummy observations for dependent variables 
    x‚Çõ::Array{Float64,2},         #¬†dummy observations for independent variables
    H·µ¢::Int64,                    # horizon of the IRFs
    instrument::DataFrame,        #¬†date of the instrument and the shock
    tickers::Vector{Any};         #¬†ticker to identify the column for the shock
    predictive_density = false,   # calculate predictive density 
    check_stationarity = true,    #¬†test stationarity of the draw 
    )

    # ------------------------------------------------------------------------------
    # COMPUTE IRF SIGN RESTRICTIONS, Author: Lapo Bini, lbini@ucsd.edu
    # ------------------------------------------------------------------------------

    #¬†Unpack and auxiliary variables 
    @unpack Œª, œÑ, Œ≥, Œµ, p, H, reps, burnin, max_try, update = Œò‚ÇÅ
    lags    = p[1];
    array   = data[:,2:end] |> any2float;
    names_v = names(data)[2:end];
    dates   = data[lags+1:end,1] .|> Date;

    # Create Variables, intercept is last column of x
    x   = X_companion(array, Int(lags), intercept_c = true)' |> Array{Float64,2};
    y   = array[lags+1:end,:];
    t,k = size(y);
    t‚Çê  = size(y‚Çõ,1);
    ŒΩ   = t + t‚Çê;

    #¬†Allocate results
    PD  = zeros(H, k, reps-burnin);
    IRF = zeros(H·µ¢, k, reps-burnin, 1);

    # Variables for the posteriors 
    Y = [y; y‚Çõ];
    X = [x; x‚Çõ]; 


    # ------------------------------------------------------------------------------
    # ALLIGN SHOCK AND DATA
    # ------------------------------------------------------------------------------
    idx_u, idx_z = bvar_allign_shock(data, instrument, lags);
    Z            = instrument[idx_z,2];
    pos_shock    = findall(tickers .== names(instrument)[2])[1];
    Tz           = length(Z);


    # ------------------------------------------------------------------------------
    # POSTERIOR DISTRIBUTION
    # ------------------------------------------------------------------------------
    Œ©‚Çì‚Åª¬π = inv(X'*X);
    A    = Œ©‚Çì‚Åª¬π*(X'*Y); #¬†Reduced form coefficient (mean of posterior distribution)
    u    = Y - X*A;     # residual using posterior mean of coefficients 
    ùõπ    = (u' * u)./ŒΩ; # Scale matrix for Inverse wishart (it will be updated)

    # Iterators, progress and index of iterations post-burnin with valid B‚ÇÄ draws
    jgibbs     = 0;
    repetition = [1; collect(1:1:100) .* (reps/100) |> Array{Int64,1}];
    percentage = [0; collect(1:1:100)];

    # Auxiliary variables for jibb sampling 
    Œ≤‚Çê = deepcopy(A[:]); #¬†fixed parameter (posterior mean of coefficient)
    Œ≤‚ÇÅ = deepcopy(A[:]); # changing one (it will be updated with random draws)
    B‚ÇÄ = [];             # used for sign restriction 


    # ------------------------------------------------------------------------------
    # GIBBS SAMPLING
    # ------------------------------------------------------------------------------
    for i in 1:reps

        # Display progress:
        idx = findall(repetition .== i);
        if ~ isempty(idx)
            ite = percentage[idx[1]]
            i <= burnin ? ite_aux = "Burnin" : ite_aux = "Post-burnin";
            println("BVAR > Structural Analysis > Gibbs Sampling: $ite_aux > $ite% iteration")
        end

        # --------------------------------------------------------------------------
        # 1 - Random Draw BVAR Coefficients and Check Stationarity 
        # --------------------------------------------------------------------------
        Œ≤, problem = bvar_MNRD(Œ≤‚Çê, ùõπ, Œ©‚Çì‚Åª¬π, max_try, k, lags);
        problem == 1 ? Œ≤ = Œ≤‚Çê : Œ≤‚ÇÅ = Œ≤; # problem = 0 BVAR stationary, draw accepted

        # --------------------------------------------------------------------------
        # 2 - Random Draw Variance Covariance Matrix
        # --------------------------------------------------------------------------
        #¬†We take the inverse of Var/Cov of the residual because we draw initially 
        #¬†from the wishart distribution with scale parameter the inverse of the 
        # original scale matrix for IW, to then take the inverse of the draw. 
        b  = reshape(Œ≤‚ÇÅ, k*lags+1, k); # Coefficient after draw matrix form
        u‚±º = Y - X*b;                 # residuals 
        S  = inv(u‚±º' * u‚±º);           # Inverse of Var/Cov matrix residual
        ùõπ  = bvar_IWRD(S, ŒΩ);         # S = scale matrix, ŒΩ = degrees of freedom 

        #¬†Sometimes the scale matrix is defined as S = Œ£‚ÇÄ + (Y‚Çú - X‚Çú‚ãÖA‚ÇÅ)'(Y‚Çú - X‚Çú‚ãÖA‚ÇÅ)
        #¬†but here we are using dummy variables, so all together and not the sum of 
        # prior variance plus var/cov of reduced form residuals:
        #¬†S = (Y‚Å∫ - X‚Å∫A‚ÇÅ)'(Y‚Å∫ - X‚Å∫A‚ÇÅ) where Y‚Å∫ and X‚Å∫ appended data


        # --------------------------------------------------------------------------
        # POST BURNIN PERIOD 
        # --------------------------------------------------------------------------
        if i > burnin && problem == 0
            jgibbs += 1

            # ----------------------------------------------------------------------
            # 3 - Compute predictive density 
            # ----------------------------------------------------------------------
            if predictive_density
                y‚Çï             = bvar_predictive_dens(k, H+1, t, lag, y, b, ùõπ)
                PD[:,:,jgibbs] = view(y‚Çï, p+1:H+p, :)
            end

            # ----------------------------------------------------------------------
            # 4 - Compute Structural IRF via External Instrument
            # ----------------------------------------------------------------------
            #¬†Take residual corresponding to the same period of the shock
            Œµ = u‚±º[idx_u,:];

            #¬†Compute IRF 
            IRF[:,:,jgibbs, 1] = bvar_irf_iv(pos_shock, Œµ, b, Z, k, Tz, lags, H·µ¢);
        end
    end

    return PD, IRF, pos_shock

end
