function bvar_sign_gibbs(
    Œò‚ÇÅ::Hyperparameter,           #¬†Hyperpriors 
    data::DataFrame,              #¬†data with dates and variable names
    y‚Çõ::Array{Float64,2},         # dummy observations for dependent variables 
    x‚Çõ::Array{Float64,2},         #¬†dummy observations for independent variables
    H·µ¢::Int64,                    # horizon of the IRFs
    sign_s::Array{Float64,2},     #¬†sign of the impulse 
    pos_policy::Vector{Float64};  #¬†position of the shocked variables for each shock
    predictive_density = false,   # calculate predictive density 
    check_stationarity = true,    #¬†test stationarity of the draw 
    max_draw           = 120000   #¬†max. n. of draws of standart normal for sign id. 
    )

    # ------------------------------------------------------------------------------
    # COMPUTE IRF SIGN RESTRICTIONS, Author: Lapo Bini, lbini@ucsd.edu
    # ------------------------------------------------------------------------------

    #¬†Unpack and auxiliary variables 
    @unpack Œª, œÑ, Œ≥, Œµ, p, H, reps, burnin, max_try, update = Œò‚ÇÅ
    lags    = p[1];
    array   = data[:,2:end] |> any2float;
    names_v = names(data)[2:end];
    dates   = data[lags+1:end,1] .|> Date;
    n_shock = size(sign_s,2);

    # Create Variables, intercept is last column of x
    x   = X_companion(array, Int(lags), intercept_c = true)' |> Array{Float64,2};
    y   = array[lags+1:end,:];
    t,k = size(y);
    t‚Çê  = size(y‚Çõ,1);
    ŒΩ   = t + t‚Çê;

    #¬†Allocate results
    PD  = zeros(H, k, reps-burnin);
    IRF = zeros(H·µ¢, k, reps-burnin, k);

    # Variables for the posteriors 
    Y = [y; y‚Çõ];
    X = [x; x‚Çõ]; 


    # ------------------------------------------------------------------------------
    # POSTERIOR DISTRIBUTION
    # ------------------------------------------------------------------------------
    Œ©‚Çì‚Åª¬π = inv(X'*X);
    A    = Œ©‚Çì‚Åª¬π*(X'*Y); #¬†Reduced form coefficient (mean of posterior distribution)
    u    = Y - X*A;     # residual using posterior mean of coefficients 
    ùõπ    = (u' * u)./ŒΩ; # Scale matrix for Inverse wishart (it will be updated)

    # Iterators, progress and index of iterations post-burnin with valid B‚ÇÄ draws
    jgibbs     = 0;
    repetition = [1; collect(1:1:100) .* (reps/100) |> Array{Int64,1}];
    percentage = [0; collect(1:1:100)];
    valid_draw = zeros(0);

    # Auxiliary variables for jibb sampling 
    Œ≤‚Çê = deepcopy(A[:]); #¬†fixed parameter (posterior mean of coefficient)
    Œ≤‚ÇÅ = deepcopy(A[:]); # changing one (it will be updated with random draws)
    B‚ÇÄ = [];             # used for sign restriction 


    # ------------------------------------------------------------------------------
    # GIBBS SAMPLING
    # ------------------------------------------------------------------------------
    for i in 1:reps

        # Display progress:
        idx = findall(repetition .== i);
        if ~ isempty(idx)
            ite = percentage[idx[1]]
            i <= burnin ? ite_aux = "Burnin" : ite_aux = "Post-burnin";
            println("BVAR > Structural Analysis > Gibbs Sampling: $ite_aux > $ite% iteration")
        end

        # --------------------------------------------------------------------------
        # 1 - Random Draw BVAR Coefficients and Check Stationarity 
        # --------------------------------------------------------------------------
        Œ≤, problem = bvar_MNRD(Œ≤‚Çê, ùõπ, Œ©‚Çì‚Åª¬π, max_try, k, lags);
        problem == 1 ? Œ≤ = Œ≤‚Çê : Œ≤‚ÇÅ = Œ≤; # problem = 0 BVAR stationary, draw accepted

        # --------------------------------------------------------------------------
        # 2 - Random Draw Variance Covariance Matrix
        # --------------------------------------------------------------------------
        #¬†We take the inverse of Var/Cov of the residual because we draw initially 
        #¬†from the wishart distribution with scale parameter the inverse of the 
        # original scale matrix for IW, to then take the inverse of the draw. 
        b  = reshape(Œ≤‚ÇÅ, k*lags+1, k); # Coefficient after draw matrix form
        u‚±º = Y - X*b;                 # residuals 
        S  = inv(u‚±º' * u‚±º);           # Inverse of Var/Cov matrix residual
        ùõπ  = bvar_IWRD(S, ŒΩ);         # S = scale matrix, ŒΩ = degrees of freedom 

        #¬†Sometimes the scale matrix is defined as S = Œ£‚ÇÄ + (Y‚Çú - X‚Çú‚ãÖA‚ÇÅ)'(Y‚Çú - X‚Çú‚ãÖA‚ÇÅ)
        #¬†but here we are using dummy variables, so all together and not the sum of 
        # prior variance plus var/cov of reduced form residuals:
        #¬†S = (Y‚Å∫ - X‚Å∫A‚ÇÅ)'(Y‚Å∫ - X‚Å∫A‚ÇÅ) where Y‚Å∫ and X‚Å∫ appended data


        # --------------------------------------------------------------------------
        # POST BURNIN PERIOD 
        # --------------------------------------------------------------------------
        if i > burnin && problem == 0
            jgibbs += 1

            # ----------------------------------------------------------------------
            # 3 - Compute predictive density 
            # ----------------------------------------------------------------------
            if predictive_density
                y‚Çï             = bvar_predictive_dens(k, H+1, t, lags, y, b, ùõπ)
                PD[:,:,jgibbs] = view(y‚Çï, p+1:H+p, :)
            end

            # ----------------------------------------------------------------------
            # 4 - Compute Matrix Contemporaneous Response
            # ----------------------------------------------------------------------
            rep_sign = 1;            #¬†keep track number of repetitions of the draw
            œï        = zeros(k, k);  # pre-allocation of the matrix of t=0 responses
            rstr_met = 0;            #¬†n. of shocks with all restr. met at each draw 
            flag     = 0;            # switching to 1 when all conditions are met

            # Cholesky decomposition of variance/covariance matrix 
            B‚ÇÄ = Matrix(cholesky(Hermitian(ùõπ)).U);

            # Loop until all restrictions are satisfied
            while flag < 1 && rep_sign <= max_draw

                #¬†Draw a candidate matrix of contemporaneous restrictions 
                Q, R        = qr(randn(k,k)); # QR Factorization of a draw N(0, I‚Çñ)
                BÃÉ‚ÇÄ          = Q * B‚ÇÄ;         # Matrix of contemporaneous shock AÀ¢‚ÇÄ
                œï[1:k,1:k]  = BÃÉ‚ÇÄ;            # Allocate the candidate  

                #¬†Check if candidate matrix AÀ¢‚ÇÄ satisfies all the restrictions 
                for kk in 1:n_shock
 
                    #¬†Position restriction and their signs
                    pos      = findall(pos_policy .== kk)[1];
                    rstr_pos = findall(.!isnan.(sign_s[:,kk]));
                    rstr_sgn = sign_s[rstr_pos,kk];

                    #¬†Pick the restricted coefficient and n. of restrictions 
                    b‚ÇÄ = BÃÉ‚ÇÄ[pos, rstr_pos]
                    r  = length(rstr_pos)

                    #¬†Check if the n. of satisfied restrictions equal the n. of
                    # restrictions specified for a given shock. The elseif check 
                    # if they meet the restrictions with the reversed signs.
                    if sum(sign.(b‚ÇÄ .* rstr_sgn)) .== r
                        rstr_met += 1
                    elseif sum(sign.(b‚ÇÄ .* rstr_sgn)) .== -r
                        rstr_met += 1
                        œï[1:k,1:k] = -BÃÉ‚ÇÄ
                    end
                end

                #¬†Check is all the shocks are satisfied, id est all the restrictions
                #¬†of each shock are satisfied, otherwise keep iterating
                rstr_met == n_shock ? flag = 1 : rstr_met = 0; 

                # Update iterator for sign computation
                rep_sign += 1;

            end

            # ----------------------------------------------------------------------
            # 5 - Compute Structural IRFs by Recursion
            # ----------------------------------------------------------------------
            # Compute response for each column of the matrix of contemporaneous 
            # response B‚ÇÄ (we will need for the Forecast Error Variance Decomposition)
            #¬†but ONLY IF the draw of B‚ÇÄ was succesful
            if flag == 1 
                for kk in 1:k

                    #¬†select contemporaneous response to shock variable k 
                    B‚ÇÄ = (œï[kk,:])' |> Array{Float64,2};

                    # Pre-allocate memory and create one unit shock, H·µ¢ horizon IRFs
                    yÃÇ = zeros(lags+H·µ¢, k); #¬†Save dynamic of the variables
                    Œµ = zeros(lags+H·µ¢, 1); #¬†sequence of shocks (all zeros except h = 0)
                    Œµ[lags+1] = 1;         # shock to the policy measure at h = 0

                    #¬†System is stationary, we consider deviation from steady state and
                    # before h = 0 the system was in steady state (variables were 0). For
                    #¬†this reason we can also eliminate the intercept 
                    for tt = lags+1:H·µ¢+lags
                        xÃÇ = Array{Float64,2}(undef, lags, k)
                        for ji = 1:lags
                            xÃÇ[ji,:] = yÃÇ[tt-ji,:]
                        end
                        xÃÇ       = [reshape((xÃÇ)', 1, k*lags) 0]
                        yÃÇ[tt,:] = xÃÇ * A + Œµ[tt] .* B‚ÇÄ;
                    end

                    #¬†Allocate all the results
                    IRF[:,:,jgibbs,kk] = view(yÃÇ, lags+1:H·µ¢+lags, :)
                end
            
                #¬†Valid draw index - repetition of post-burnin with valid B‚ÇÄ
                append!(valid_draw, jgibbs);

            end
        end
    end

    return PD, IRF, valid_draw

end
